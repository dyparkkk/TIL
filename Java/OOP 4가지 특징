## 캡슐화

- 실제 구현부분이 드러나지 않음
- 변수와 메서드를 묶음
- 데이터를 외부에서 접근하지 않고 함수를 통해서만 접근

## 상속

- 기능의 일부를 변경하는 경우 자식클래스는 부모클래스를 상속 받아 수정
- 캡슐화를 유지, 재사용이 용이하게 해줌

## 추상화

- 인터페이스로 클래스들의 공통적인 특성(변수, 메서드)를 묶어서 표현

## 다형성

- 어떤 변수, 메서드가 상황에 따라 다른 결과를 내는 것
    - 오버로딩 : 하나의 클래스에서 메소드의 이름이 같지만 파라메터가 다른것
    - 오버라이딩 : 부모 클래스의 메소드를 자식클래스에서 재정의해서 사용하는 것

참고자료 : 

[📚OOP의 5원칙과 4가지 특성](https://velog.io/@ygh7687/OOP%EC%9D%98-5%EC%9B%90%EC%B9%99%EA%B3%BC-4%EA%B0%80%EC%A7%80-%ED%8A%B9%EC%84%B1)
